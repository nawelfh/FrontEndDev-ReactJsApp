{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { CLASS, ICON_POSITIONS, SIZES, isAtomIcon, prepareAtomIcon } from './config.js';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ButtonIcon = function ButtonIcon(_ref) {\n  var children = _ref.children,\n      position = _ref.position,\n      size = _ref.size;\n  if (!children) return null; // if the icon is an AtomIcon we've to be sure correct props are used\n\n  var iconToRender = isAtomIcon(children) ? prepareAtomIcon(children, {\n    size: size\n  }) : children;\n  return /*#__PURE__*/_jsx(\"span\", {\n    className: CLASS + \"-\" + position + \"Icon\",\n    children: iconToRender\n  });\n};\n\nexport default ButtonIcon;","map":{"version":3,"sources":["C:/Users/dell/Desktop/ReactJs/myapp/node_modules/@s-ui/react-atom-button/lib/ButtonIcon.js"],"names":["PropTypes","CLASS","ICON_POSITIONS","SIZES","isAtomIcon","prepareAtomIcon","jsx","_jsx","ButtonIcon","_ref","children","position","size","iconToRender","className"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,EAAgBC,cAAhB,EAAgCC,KAAhC,EAAuCC,UAAvC,EAAmDC,eAAnD,QAA0E,aAA1E;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AAEA,IAAIC,UAAU,GAAG,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AACzC,MAAIC,QAAQ,GAAGD,IAAI,CAACC,QAApB;AAAA,MACIC,QAAQ,GAAGF,IAAI,CAACE,QADpB;AAAA,MAEIC,IAAI,GAAGH,IAAI,CAACG,IAFhB;AAGA,MAAI,CAACF,QAAL,EAAe,OAAO,IAAP,CAJ0B,CAIb;;AAE5B,MAAIG,YAAY,GAAGT,UAAU,CAACM,QAAD,CAAV,GAAuBL,eAAe,CAACK,QAAD,EAAW;AAClEE,IAAAA,IAAI,EAAEA;AAD4D,GAAX,CAAtC,GAEdF,QAFL;AAGA,SAAO,aAAaH,IAAI,CAAC,MAAD,EAAS;AAC/BO,IAAAA,SAAS,EAAEb,KAAK,GAAG,GAAR,GAAcU,QAAd,GAAyB,MADL;AAE/BD,IAAAA,QAAQ,EAAEG;AAFqB,GAAT,CAAxB;AAID,CAbD;;AAeA,eAAeL,UAAf","sourcesContent":["import PropTypes from 'prop-types';\nimport { CLASS, ICON_POSITIONS, SIZES, isAtomIcon, prepareAtomIcon } from './config.js';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ButtonIcon = function ButtonIcon(_ref) {\n  var children = _ref.children,\n      position = _ref.position,\n      size = _ref.size;\n  if (!children) return null; // if the icon is an AtomIcon we've to be sure correct props are used\n\n  var iconToRender = isAtomIcon(children) ? prepareAtomIcon(children, {\n    size: size\n  }) : children;\n  return /*#__PURE__*/_jsx(\"span\", {\n    className: CLASS + \"-\" + position + \"Icon\",\n    children: iconToRender\n  });\n};\n\nexport default ButtonIcon;"]},"metadata":{},"sourceType":"module"}