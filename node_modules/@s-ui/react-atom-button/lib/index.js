import _extends from "@babel/runtime/helpers/esm/extends";
import { forwardRef } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';
import Button from './Button.js';
import ButtonIcon from './ButtonIcon.js';
import ButtonSpinnerIcon from './buttonSpinnerIcon/index.js';
import { CLASS, COLORS, DESIGNS, ALIGNMENT, ICON_POSITIONS, GROUP_POSITIONS, SIZES, TYPES, SHAPES, TYPES_CONVERSION, CLASSES, cleanProps, getModifiers, deprecated, typeConversion, getPropsWithDefaultValues } from './config.js';
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var AtomButton = /*#__PURE__*/forwardRef(function (props, ref) {
  var _cx, _cx2;

  var _getPropsWithDefaultV = getPropsWithDefaultValues(typeConversion(props)),
      alignment = _getPropsWithDefaultV.alignment,
      className = _getPropsWithDefaultV.className,
      children = _getPropsWithDefaultV.children,
      color = _getPropsWithDefaultV.color,
      design = _getPropsWithDefaultV.design,
      disabled = _getPropsWithDefaultV.disabled,
      isLoading = _getPropsWithDefaultV.isLoading,
      focused = _getPropsWithDefaultV.focused,
      groupPosition = _getPropsWithDefaultV.groupPosition,
      link = _getPropsWithDefaultV.link,
      leftIcon = _getPropsWithDefaultV.leftIcon,
      loadingText = _getPropsWithDefaultV.loadingText,
      _getPropsWithDefaultV2 = _getPropsWithDefaultV.loader,
      loader = _getPropsWithDefaultV2 === void 0 ? /*#__PURE__*/_jsx(ButtonSpinnerIcon, {}) : _getPropsWithDefaultV2,
      rightIcon = _getPropsWithDefaultV.rightIcon,
      size = _getPropsWithDefaultV.size,
      title = _getPropsWithDefaultV.title,
      type = _getPropsWithDefaultV.type,
      shape = _getPropsWithDefaultV.shape,
      isFitted = _getPropsWithDefaultV.isFitted,
      selected = _getPropsWithDefaultV.selected;

  var classNames = cx(CLASS, CLASSES[color], CLASSES[design], alignment && CLASSES[alignment], groupPosition && CLASS + "-group " + CLASS + "-group--" + groupPosition, groupPosition && focused && CLASS + "-group--focused", groupPosition && selected && CLASS + "-group--selected", size && CLASSES[size], getModifiers(_extends({}, props, {
    disabled: disabled || isLoading
  })).map(function (key) {
    return CLASSES[key];
  }), !children && CLASSES.empty, (_cx = {}, _cx[CLASS + "--" + shape] = Object.values(SHAPES).includes(shape), _cx), (_cx2 = {}, _cx2[CLASS + "--loading"] = isLoading, _cx2[CLASS + "--fitted"] = isFitted, _cx2), className);
  var newProps = cleanProps(props);
  return /*#__PURE__*/_jsx(Button, _extends({}, newProps, {
    type: type,
    link: link,
    className: classNames,
    title: title,
    disabled: disabled || isLoading,
    forwardingRef: ref,
    children: /*#__PURE__*/_jsx("span", {
      className: CLASS + "-inner",
      children: isLoading ? /*#__PURE__*/_jsxs(_Fragment, {
        children: [/*#__PURE__*/_jsx(ButtonIcon, {
          position: loadingText ? ICON_POSITIONS.LEFT : ICON_POSITIONS.CENTER,
          size: size,
          children: loader
        }), children && loadingText ? loadingText : /*#__PURE__*/_jsx("span", {
          className: CLASS + "-text",
          children: children
        })]
      }) : /*#__PURE__*/_jsxs(_Fragment, {
        children: [/*#__PURE__*/_jsx(ButtonIcon, {
          position: ICON_POSITIONS.LEFT,
          size: size,
          children: leftIcon
        }), leftIcon || rightIcon ? /*#__PURE__*/_jsx("span", {
          className: CLASS + "-text",
          children: children
        }) : children, /*#__PURE__*/_jsx(ButtonIcon, {
          position: ICON_POSITIONS.RIGHT,
          size: size,
          children: rightIcon
        })]
      })
    })
  }));
});
AtomButton.displayName = 'AtomButton';
export default AtomButton;
export { GROUP_POSITIONS as atomButtonGroupPositions };
export { COLORS as atomButtonColors };
export { DESIGNS as atomButtonDesigns };
export { SIZES as atomButtonSizes };
export { TYPES as atomButtonTypes };
export { ALIGNMENT as atomButtonAlignment };
export { SHAPES as atomButtonShapes };